
#  'Bloom Filter', from https://samwho.dev/bloom-filters/

# Here are three rubbish hash functions

func hash1(str) (
 local out (1234);
 for (i 0 length str) (
  set out ^ >>> out 7 << out 7 * (byte-get str i) + 1 & out 0xffffff
 )
 & 0x7fffffff out
)

func hash2(str) (
 local out (length str);
 for (i 0 length str) (
  set out ^ >>> out 1 << out 31 byte-get str i
 )
 & 0x7fffffff out
)

func hash3(str) (
 local out (^ 0x1234abcd byte-get str 0);
 for (i 0 length str) (
  set out + (& 0x7fffffff | >>> out 2 << out 30) byte-get str i >>> out 31
 )
 & 0x7fffffff out
)

# This function makes a bit field.
# We're representing the bit field as an array, where the first item is a number telling the number of bits in the bit field,
# and the second item is a string, where the length of characters roughly the number of bits / 8 + 1
# 'Rubish' allows you to have strings that contain the ASCII "NUL" character, and allows you to treat strings as byte arrays using 'byte-get' and 'byte-set'

func make-bit-field ( num-bits ) (
 local out;
 set out  string$ ( + 1 int / num-bits 8 ) chr$ 0;
 make-array num-bits out;
)

func _get-bit ( n ) (
 local byte-index (>> n 3) bit-mask (<< 1 % n 8);
 ! ! & bit-mask byte-get bits byte-index
)

func _set-bit ( n ) (
 local byte-index (>> n 3) bit-mask (<< 1 % n 8);
 byte-set bits byte-index | bit-mask byte-get bits byte-index
)

func bloom-add ( bit-field str ) (
 local num-bits (bit-field[0]) bits (bit-field[1]);
 local h1 (hash1 str) h2 (hash2 str) h3 (hash3 str);
 _set-bit ( % h1 num-bits );
 _set-bit ( % h2 num-bits );
 _set-bit ( % h3 num-bits );
)

func bloom-contains ( bit-field str ) (
 local num-bits (bit-field[0]) bits (bit-field[1]);
 local h1 (hash1 str) h2 (hash2 str) h3 (hash3 str);
 && _get-bit ( % h1 num-bits )
    _get-bit ( % h2 num-bits )
    _get-bit ( % h3 num-bits )
)


set bf  make-bit-field 200;

bloom-add bf "test";
print bloom-contains bf "test";
print bloom-contains bf "cherry";

set test-strings (make-array "one" "two" "three" "four" "five" "six" "here is some stuff");
set more-strings (make-array "apple" "banana" "pear" "orange" "PENIS" "mango" "lemon");

foreach i test-strings (
 print cat$ "Adding '" i "'";
 bloom-add bf i
)


#      ____            _     _ 
#     |  _ \ ___ _ __ (_)___| |
#     | |_) / _ \ '_ \| / __| |
#     |  __/  __/ | | | \__ \_|
#     |_|   \___|_| |_|_|___(_)


print "Bloom filter test: Are these strings contained?";

foreach i (join test-strings more-strings) (
 print i "" if(bloom-contains bf i)("YES")("NO");
)